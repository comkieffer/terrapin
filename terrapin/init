
local function log(string)
	local logfile = fs.open('/startup_log.txt', 'a')
	logfile.write(
		('day %d @ %s - %s\n')
		:format(os.day(), textutils.formatTime(os.time(), true), string)
	)
	logfile.close()
end

-- Make aliases for all the files in the folder specified by path
-- The function looks for all the lua files in the folder and generates a
-- alias without the '.lua' at the end and a lower case version of the name
--
-- eg:
-- 	consider a directory /bin/ containing someExecutable.lua
--  This executable will be available as someExecutable and someexecutable
--
function _make_aliases(path)
	local programs = fs.list(path)

	for _, program in ipairs(programs) do
		local full_name = fs.combine(path, program)
		if not fs.isDir(full_name) and string.find(program, ".lua$") then
			local alias = program:sub(1, -5)

			shell.setAlias(alias, full_name)
			shell.setAlias(alias:lower(), full_name)
			log("added alias : " .. alias .. " (" .. alias:lower() .. ") for : " .. full_name)
		end
	end
end

-- Actual Startup Code Start

-- Remove the CraftOS messages
term.clear()
term.setCursorPos(0, 0)

-- load require API to allow ondemand loading of APIs
dofile("/terrapin/apis/require.lua")
log("Loaded require API\n")

local checkin = require 'checkin.client'

-- override 'error' for better reporting
local _old_error = error
function error (message, level)
	local level = level or 1

	-- If the checkin module is loaded and active
	if checkin and #checkin.task_stack > 1 then
		checkin.error('ERROR : ' .. message)
	end

	_old_error(message, level + 1)
end

-- Make aliases for all the programs. We iterate through all the installed
-- packages to add their bin paths to the list of paths for which to generate
-- aliases
local bin_paths = {'/terrapin/programs'}

if fs.isDir('/packages') then
	local packages = fs.list('/packages')

	for k = 1, #packages do
		local bin_path = fs.combine(
			fs.combine('/packages', packages[k]), 'bin')
		table.insert(bin_paths, bin_path)
	end
end

for k = 1, #bin_paths do
	_make_aliases(bin_paths[k])
end

-- try to do autoruns
log("Starting autorun ...")
if fs.exists("/autorun") and not fs.isDir("/autorun") then
	dofile("/autorun")
end

log("Initialisation completed")

-- Generate startup message with computer/turtle information
local computer_id, computer_label = os.getComputerID(), os.getComputerLabel()
local startup_msg = ""

if computer_label then
	startup_msg =
		"+\n" ..
		"| Running Terrapin API Collection v2.0\n" ..
		"| \n" ..
		"| Label : " .. os.getComputerLabel() .. " (Id: " .. os.getComputerID() .. ")\n"

	if turtle then
		startup_msg = startup_msg .. "| Fuel Level : " .. turtle.getFuelLevel() .. "\n"
	end

else
	startup_msg =
		"WARNING : This computer does not have a label. If you break it all " ..
		"files stored in this computer will be destroyed.\n\n## Computer ID: " ..
		computer_id .. '##\n'
end

log("Startup Complete")

print("\n" .. startup_msg .. "+\n")
