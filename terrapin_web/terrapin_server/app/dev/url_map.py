
import re

from collections import OrderedDict
from flask       import current_app

def url_map():
	"""
	Generate a easy to navigate structure of urls that prunes the auto generated
	views (admin & co) as well as the empty blueprints.

	This data is structured as :

		urls = {
			'blueprint_name': [
				{'url': some-url, 'endpoint': 'some endpoint',
				 'defaults': { ... }, 'methods': [ ... ] },
				{ ... }
			],
			'another_bp': [
				...
			]
		}
	"""

	url_map = current_app.url_map
	urls = {}

	for rule in url_map.iter_rules():
		# regex explanation :
		#  	^ 		From the start of the line
		#  	[\w-*]*	Select any character that is alphanumeric ([a-zA-Z0-9_]) or
		#  			is a '-'
		#  	[.]?	until we find a dot.
		bp_extractor = re.compile( '^([\w-]*)[.]?' )
		blueprint = bp_extractor.match(rule.endpoint)

		bp_name = blueprint.groups()[0]
		if not urls.get(bp_name):
			urls[bp_name] = []

		# skip all the xxxview routes generated by Flask-Admin and FDTB
		if rule.rule.startswith('/admin') or rule.rule.startswith('/_debug_'):
			continue

		# format methods :
		methods = ' '.join( [method for method in rule.methods if method != 'OPTIONS'] )
		urls[bp_name].append({
			'url'      : rule.rule,
			'endpoint' : rule.endpoint,
			'defaults'  : rule.defaults,
			'methods'  : methods
		})

	# remove blueprints with no rules. These are most likely blueprints that
	# had all their rules discarded above eg. admin and debug toolbar blueprints
	good_bps = {}
	for blueprint in urls:
		if len(urls[blueprint]) != 0:
			good_bps[blueprint] = urls[blueprint]

	# sort the urls of the remaining blueprints
	for bp in good_bps:
		good_bps[bp] = sorted(good_bps[bp], key = lambda rule: rule['url'])

	ordered_rules = OrderedDict(sorted(good_bps.items(), key = lambda rule: rule[0]))

	return ordered_rules